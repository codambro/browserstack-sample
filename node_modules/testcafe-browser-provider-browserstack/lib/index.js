"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const url_1 = require("url");
const pinkie_1 = __importDefault(require("pinkie"));
const util_1 = require("util");
const desired_capabilities_1 = __importDefault(require("desired-capabilities"));
const lodash_1 = require("lodash");
const connector_1 = __importDefault(require("./connector"));
const js_testing_1 = __importDefault(require("./backends/js-testing"));
const automate_1 = __importDefault(require("./backends/automate"));
const browser_proxy_1 = __importDefault(require("./browser-proxy"));
const is_env_var_true_1 = __importDefault(require("./utils/is-env-var-true"));
const mime_db_1 = __importDefault(require("mime-db"));
const ANDROID_PROXY_RESPONSE_DELAY = 500;
const isAutomateEnabled = () => (0, is_env_var_true_1.default)('BROWSERSTACK_USE_AUTOMATE');
const isLocalEnabled = () => !!process.env.BROWSERSTACK_LOCAL_IDENTIFIER || !(0, is_env_var_true_1.default)('BROWSERSTACK_NO_LOCAL');
function getMimeTypes() {
    const mimeTypes = Object.keys(mime_db_1.default);
    return mimeTypes.filter(mimeType => {
        const { extensions } = mime_db_1.default[mimeType];
        return extensions && extensions.length;
    }).join(',');
}
module.exports = {
    // Multiple browsers support
    isMultiBrowser: true,
    backend: null,
    connectorPromise: pinkie_1.default.resolve(null),
    browserProxyPromise: pinkie_1.default.resolve(null),
    workers: {},
    platformsInfo: [],
    browserNames: [],
    _createConnector() {
        this.connectorPromise = this.connectorPromise
            .then(async (connector) => {
            if (!connector) {
                connector = new connector_1.default(process.env['BROWSERSTACK_ACCESS_KEY']);
                await connector.create();
            }
            return connector;
        });
        return this.connectorPromise;
    },
    _disposeConnector() {
        this.connectorPromise = this.connectorPromise
            .then(async (connector) => {
            if (connector)
                await connector.destroy();
            return null;
        });
        return this.connectorPromise;
    },
    _getBrowserProxy(host, port) {
        this.browserProxyPromise = this.browserProxyPromise
            .then(async (browserProxy) => {
            if (!browserProxy) {
                browserProxy = new browser_proxy_1.default(host, port, { responseDelay: ANDROID_PROXY_RESPONSE_DELAY });
                await browserProxy.init();
            }
            return browserProxy;
        });
        return this.browserProxyPromise;
    },
    _disposeBrowserProxy() {
        this.browserProxyPromise = this.browserProxyPromise
            .then(async (browserProxy) => {
            if (browserProxy)
                await browserProxy.dispose();
            return null;
        });
        return this.browserProxyPromise;
    },
    async _getDeviceList() {
        this.platformsInfo = await this.backend.getBrowsersList();
    },
    _createQuery(capabilities) {
        var { browserName, browserVersion, platform } = (0, desired_capabilities_1.default)(capabilities)[0];
        browserName = browserName.toLowerCase();
        if (browserName === 'internet explorer')
            browserName = 'ie';
        return {
            name: browserName,
            version: browserVersion.toLowerCase(),
            platform: platform.toLowerCase()
        };
    },
    _generateBasicCapabilities(browserName) {
        return this._filterPlatformInfo(this._createQuery(browserName))[0];
    },
    _getCapabilitiesFromEnvironment() {
        // NOTE: This function maps env vars to browserstack capabilities.
        // For the full list of capabilities, see https://www.browserstack.com/automate/capabilities
        return {
            'build': process.env['BROWSERSTACK_BUILD_ID'] || process.env['BROWSERSTACK_BUILD_NAME'],
            'project': process.env['BROWSERSTACK_PROJECT_NAME'],
            'resolution': process.env['BROWSERSTACK_DISPLAY_RESOLUTION'],
            'name': process.env['BROWSERSTACK_TEST_RUN_NAME'],
            'browserstack.debug': process.env['BROWSERSTACK_DEBUG'],
            'browserstack.console': process.env['BROWSERSTACK_CONSOLE'],
            'browserstack.networkLogs': process.env['BROWSERSTACK_NETWORK_LOGS'],
            'browserstack.video': process.env['BROWSERSTACK_VIDEO'],
            'browserstack.timezone': process.env['BROWSERSTACK_TIMEZONE'],
            'browserstack.geoLocation': process.env['BROWSERSTACK_GEO_LOCATION'],
            'browserstack.customNetwork': process.env['BROWSERSTACK_CUSTOM_NETWORK'],
            'browserstack.networkProfile': process.env['BROWSERSTACK_NETWORK_PROFILE'],
            'acceptSslCerts': process.env['BROWSERSTACK_ACCEPT_SSL_CERTS']
        };
    },
    _getCapabilitiesFromConfig() {
        const configPath = process.env.BROWSERSTACK_CAPABILITIES_CONFIG_PATH;
        if (!configPath)
            return {};
        return require(configPath);
    },
    _getAdditionalCapabilities() {
        const capabilitiesFromEnvironment = (0, lodash_1.pickBy)(this._getCapabilitiesFromEnvironment(), value => value !== void 0);
        return Object.assign(Object.assign({}, this._getCapabilitiesFromConfig()), capabilitiesFromEnvironment);
    },
    _filterPlatformInfo(query) {
        let filteredPlatformInfo = this.platformsInfo
            .filter(info => {
            var browserNameMatched = info['browser'] && info['browser'].toLowerCase() === query.name;
            var deviceNameMatched = info['device'] && info['device'].toLowerCase() === query.name;
            var browserVersionMatched = info['browser_version'] && String(info['browser_version']) === String(query.version);
            var platformVersionMatched = info['os_version'] && String(info['os_version']).toLowerCase() === String(query.version);
            var platformNameMatched = info['os'].toLowerCase() === query.platform ||
                `${info['os'].toLowerCase()} ${info['os_version'].toLowerCase()}` === query.platform;
            var isAnyVersion = query.version === 'any';
            var isAnyPlatform = query.platform === 'any';
            var desktopBrowserMatched = browserNameMatched &&
                (browserVersionMatched || isAnyVersion) &&
                (platformNameMatched || isAnyPlatform);
            var mobileBrowserMatched = deviceNameMatched &&
                (platformVersionMatched || isAnyVersion);
            return desktopBrowserMatched || mobileBrowserMatched;
        });
        if (filteredPlatformInfo.length && query.version === 'any') {
            filteredPlatformInfo = filteredPlatformInfo.filter(info => {
                const browserVersion = info['browser_version'] || '';
                return !browserVersion.includes('beta');
            });
        }
        return filteredPlatformInfo;
    },
    _generateBrowserNames() {
        this.browserNames = this.platformsInfo
            .map(info => {
            var isDesktop = !info['device'];
            var name = isDesktop ? info['browser'] : info['device'];
            var version = isDesktop ? info['browser_version'] : info['os_version'];
            var platform = isDesktop ? `${info['os']} ${info['os_version']}` : '';
            return `${name}@${version}${platform ? ':' + platform : ''}`;
        });
    },
    _prepareChromeCapabilities(capabilities) {
        if (process.env['BROWSERSTACK_CHROME_ARGS'] && process.env['BROWSERSTACK_CHROME_ARGS'].length > 0)
            capabilities.chromeOptions = { args: [process.env['BROWSERSTACK_CHROME_ARGS']] };
    },
    async _prepareFirefoxCapabilities(capabilities) {
        if (!process.env['BROWSERSTACK_USE_AUTOMATE'])
            return;
        const FirefoxProfile = require('firefox-profile');
        const profile = new FirefoxProfile();
        profile.defaultPreferences = {};
        profile.setPreference('browser.helperApps.neverAsk.saveToDisk', getMimeTypes());
        profile.updatePreferences();
        capabilities['firefox_profile'] = await (0, util_1.promisify)(profile.encoded).bind(profile)();
    },
    async _encodeFirefoxProfile(profile) {
        return new pinkie_1.default((resolve, reject) => {
            profile.encoded(function (err, encodedProfile) {
                if (err)
                    reject(err);
                else
                    resolve(encodedProfile);
            });
        });
    },
    // Required - must be implemented
    // Browser control
    async openBrowser(id, pageUrl, browserName) {
        const capabilities = Object.assign(Object.assign({}, this._generateBasicCapabilities(browserName)), this._getAdditionalCapabilities());
        capabilities.local = isLocalEnabled();
        // Give preference to the already running local identifier
        capabilities.localIdentifier = process.env.BROWSERSTACK_LOCAL_IDENTIFIER;
        if (capabilities.local && !capabilities.localIdentifier) {
            const connector = await this._createConnector();
            capabilities.localIdentifier = connector.connectorInstance.localIdentifierFlag;
        }
        if (capabilities.os.toLowerCase() === 'android') {
            const parsedPageUrl = (0, url_1.parse)(pageUrl);
            const browserProxy = await this._getBrowserProxy(parsedPageUrl.hostname, parsedPageUrl.port);
            pageUrl = 'http://' + browserProxy.targetHost + ':' + browserProxy.proxyPort + parsedPageUrl.path;
        }
        if (!capabilities.name)
            capabilities.name = `TestCafe test run ${id}`;
        if (browserName.includes('chrome'))
            this._prepareChromeCapabilities(capabilities);
        if (browserName.includes('firefox'))
            await this._prepareFirefoxCapabilities(capabilities);
        await this.backend.openBrowser(id, pageUrl, capabilities);
        this.setUserAgentMetaInfo(id, this.backend.getSessionUrl(id));
    },
    async closeBrowser(id) {
        await this.backend.closeBrowser(id);
    },
    // Optional - implement methods you need, remove other methods
    // Initialization
    async init() {
        var reportWarning = (...args) => this.reportWarning(...args);
        this.backend = isAutomateEnabled() ? new automate_1.default(reportWarning) : new js_testing_1.default(reportWarning);
        await this._getDeviceList();
        this._generateBrowserNames();
    },
    async dispose() {
        await this._disposeConnector();
        await this._disposeBrowserProxy();
    },
    // Browser names handling
    async getBrowserList() {
        return this.browserNames;
    },
    async isValidBrowserName(browserName) {
        return (0, desired_capabilities_1.default)(browserName).length === 1 && !!this._filterPlatformInfo(this._createQuery(browserName)).length;
    },
    // Extra methods
    async resizeWindow(id, width, height, currentWidth, currentHeight) {
        await this.backend.resizeWindow(id, width, height, currentWidth, currentHeight);
    },
    async maximizeWindow(id) {
        await this.backend.maximizeWindow(id);
    },
    async takeScreenshot(id, screenshotPath) {
        await this.backend.takeScreenshot(id, screenshotPath);
    },
    async reportJobResult(id, jobResult, jobData) {
        await this.backend.reportJobResult(id, jobResult, jobData, this.JOB_RESULT);
    },
    async getOSInfo(id) {
        return await this.backend.getOSInfo(id);
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw2QkFBd0M7QUFDeEMsb0RBQTZCO0FBQzdCLCtCQUFpQztBQUNqQyxnRkFBcUQ7QUFDckQsbUNBQWdDO0FBQ2hDLDREQUFnRDtBQUNoRCx1RUFBcUQ7QUFDckQsbUVBQWtEO0FBQ2xELG9FQUEyQztBQUMzQyw4RUFBbUQ7QUFDbkQsc0RBQXlCO0FBRXpCLE1BQU0sNEJBQTRCLEdBQUcsR0FBRyxDQUFDO0FBRXpDLE1BQU0saUJBQWlCLEdBQUcsR0FBRyxFQUFFLENBQUMsSUFBQSx5QkFBWSxFQUFDLDJCQUEyQixDQUFDLENBQUM7QUFDMUUsTUFBTSxjQUFjLEdBQU0sR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsNkJBQTZCLElBQUksQ0FBQyxJQUFBLHlCQUFZLEVBQUMsdUJBQXVCLENBQUMsQ0FBQztBQUV0SCxTQUFTLFlBQVk7SUFDakIsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxpQkFBRSxDQUFDLENBQUM7SUFFbEMsT0FBTyxTQUFTLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1FBQy9CLE1BQU0sRUFBRSxVQUFVLEVBQUUsR0FBRyxpQkFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRXBDLE9BQU8sVUFBVSxJQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUM7SUFDM0MsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2pCLENBQUM7QUFFRCxNQUFNLENBQUMsT0FBTyxHQUFHO0lBQ2IsNEJBQTRCO0lBQzVCLGNBQWMsRUFBRSxJQUFJO0lBRXBCLE9BQU8sRUFBRSxJQUFJO0lBRWIsZ0JBQWdCLEVBQUssZ0JBQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO0lBQzFDLG1CQUFtQixFQUFFLGdCQUFPLENBQUMsT0FB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TUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxFQUFFLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUVELEtBQUssQ0FBQyxlQUFlLENBQUUsRUFBRSxFQUFFLFNBQVMsRUFBRSxPQUFPO1FBQ3pDLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsRUFBRSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ2hGLENBQUM7SUFFRCxLQUFLLENBQUMsU0FBUyxDQUFFLEVBQUU7UUFDZixPQUFPLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDNUMsQ0FBQztDQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwYXJzZSBhcyBwYXJzZVVybCB9IGZyb20gJ3VybCc7XG5pbXBvcnQgUHJvbWlzZSBmcm9tICdwaW5raWUnO1xuaW1wb3J0IHsgcHJvbWlzaWZ5IH0gZnJvbSAndXRpbCc7XG5pbXBvcnQgcGFyc2VDYXBhYmlsaXRpZXMgZnJvbSAnZGVzaXJlZC1jYXBhYmlsaXRpZXMnO1xuaW1wb3J0IHsgcGlja0J5IH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBCcm93c2Vyc3RhY2tDb25uZWN0b3IgZnJvbSAnLi9jb25uZWN0b3InO1xuaW1wb3J0IEpTVGVzdGluZ0JhY2tlbmQgZnJvbSAnLi9iYWNrZW5kcy9qcy10ZXN0aW5nJztcbmltcG9ydCBBdXRvbWF0ZUJhY2tlbmQgZnJvbSAnLi9iYWNrZW5kcy9hdXRvbWF0ZSc7XG5pbXBvcnQgQnJvd3NlclByb3h5IGZyb20gJy4vYnJvd3Nlci1wcm94eSc7XG5pbXBvcnQgaXNFbnZWYXJUcnVlIGZyb20gJy4vdXRpbHMvaXMtZW52LXZhci10cnVlJztcbmltcG9ydCBkYiBmcm9tICdtaW1lLWRiJztcblxuY29uc3QgQU5EUk9JRF9QUk9YWV9SRVNQT05TRV9ERUxBWSA9IDUwMDtcblxuY29uc3QgaXNBdXRvbWF0ZUVuYWJsZWQgPSAoKSA9PiBpc0VudlZhclRydWUoJ0JST1dTRVJTVEFDS19VU0VfQVVUT01BVEUnKTtcbmNvbnN0IGlzTG9jYWxFbmFibGVkICAgID0gKCkgPT4gISFwcm9jZXNzLmVudi5CUk9XU0VSU1RBQ0tfTE9DQUxfSURFTlRJRklFUiB8fCAhaXNFbnZWYXJUcnVlKCdCUk9XU0VSU1RBQ0tfTk9fTE9DQUwnKTtcblxuZnVuY3Rpb24gZ2V0TWltZVR5cGVzICgpIHtcbiAgICBjb25zdCBtaW1lVHlwZXMgPSBPYmplY3Qua2V5cyhkYik7XG5cbiAgICByZXR1cm4gbWltZVR5cGVzLmZpbHRlcihtaW1lVHlwZSA9PiB7XG4gICAgICAgIGNvbnN0IHsgZXh0ZW5zaW9ucyB9ID0gZGJbbWltZVR5cGVdO1xuXG4gICAgICAgIHJldHVybiBleHRlbnNpb25zICYmIGV4dGVuc2lvbnMubGVuZ3RoO1xuICAgIH0pLmpvaW4oJywnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgLy8gTXVsdGlwbGUgYnJvd3NlcnMgc3VwcG9ydFxuICAgIGlzTXVsdGlCcm93c2VyOiB0cnVlLFxuXG4gICAgYmFja2VuZDogbnVsbCxcblxuICAgIGNvbm5lY3RvclByb21pc2U6ICAgIFByb21pc2UucmVzb2x2ZShudWxsKSxcbiAgICBicm93c2VyUHJveHlQcm9taXNlOiBQcm9taXNlLnJlc29sdmUobnVsbCksXG5cbiAgICB3b3JrZXJzOiAgICAgICB7fSxcbiAgICBwbGF0Zm9ybXNJbmZvOiBbXSxcbiAgICBicm93c2VyTmFtZXM6ICBbXSxcblxuICAgIF9jcmVhdGVDb25uZWN0b3IgKCkge1xuICAgICAgICB0aGlzLmNvbm5lY3RvclByb21pc2UgPSB0aGlzLmNvbm5lY3RvclByb21pc2VcbiAgICAgICAgICAgIC50aGVuKGFzeW5jIGNvbm5lY3RvciA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFjb25uZWN0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY29ubmVjdG9yID0gbmV3IEJyb3dzZXJzdGFja0Nvbm5lY3Rvcihwcm9jZXNzLmVudlsnQlJPV1NFUlNUQUNLX0FDQ0VTU19LRVknXSk7XG5cbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgY29ubmVjdG9yLmNyZWF0ZSgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBjb25uZWN0b3I7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdGhpcy5jb25uZWN0b3JQcm9taXNlO1xuICAgIH0sXG5cbiAgICBfZGlzcG9zZUNvbm5lY3RvciAoKSB7XG4gICAgICAgIHRoaXMuY29ubmVjdG9yUHJvbWlzZSA9IHRoaXMuY29ubmVjdG9yUHJvbWlzZVxuICAgICAgICAgICAgLnRoZW4oYXN5bmMgY29ubmVjdG9yID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoY29ubmVjdG9yKVxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBjb25uZWN0b3IuZGVzdHJveSgpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdGhpcy5jb25uZWN0b3JQcm9taXNlO1xuICAgIH0sXG5cbiAgICBfZ2V0QnJvd3NlclByb3h5IChob3N0LCBwb3J0KSB7XG4gICAgICAgIHRoaXMuYnJvd3NlclByb3h5UHJvbWlzZSA9IHRoaXMuYnJvd3NlclByb3h5UHJvbWlzZVxuICAgICAgICAgICAgLnRoZW4oYXN5bmMgYnJvd3NlclByb3h5ID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIWJyb3dzZXJQcm94eSkge1xuICAgICAgICAgICAgICAgICAgICBicm93c2VyUHJveHkgPSBuZXcgQnJvd3NlclByb3h5KGhvc3QsIHBvcnQsIHsgcmVzcG9uc2VEZWxheTogQU5EUk9JRF9QUk9YWV9SRVNQT05TRV9ERUxBWSB9KTtcblxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBicm93c2VyUHJveHkuaW5pdCgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBicm93c2VyUHJveHk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdGhpcy5icm93c2VyUHJveHlQcm9taXNlO1xuICAgIH0sXG5cbiAgICBfZGlzcG9zZUJyb3dzZXJQcm94eSAoKSB7XG4gICAgICAgIHRoaXMuYnJvd3NlclByb3h5UHJvbWlzZSA9IHRoaXMuYnJvd3NlclByb3h5UHJvbWlzZVxuICAgICAgICAgICAgLnRoZW4oYXN5bmMgYnJvd3NlclByb3h5ID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoYnJvd3NlclByb3h5KVxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBicm93c2VyUHJveHkuZGlzcG9zZSgpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdGhpcy5icm93c2VyUHJveHlQcm9taXNlO1xuICAgIH0sXG5cbiAgICBhc3luYyBfZ2V0RGV2aWNlTGlzdCAoKSB7XG4gICAgICAgIHRoaXMucGxhdGZvcm1zSW5mbyA9IGF3YWl0IHRoaXMuYmFja2VuZC5nZXRCcm93c2Vyc0xpc3QoKTtcbiAgICB9LFxuXG4gICAgX2NyZWF0ZVF1ZXJ5IChjYXBhYmlsaXRpZXMpIHtcbiAgICAgICAgdmFyIHsgYnJvd3Nlck5hbWUsIGJyb3dzZXJWZXJzaW9uLCBwbGF0Zm9ybSB9ID0gcGFyc2VDYXBhYmlsaXRpZXMoY2FwYWJpbGl0aWVzKVswXTtcblxuICAgICAgICBicm93c2VyTmFtZSA9IGJyb3dzZXJOYW1lLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgICAgaWYgKGJyb3dzZXJOYW1lID09PSAnaW50ZXJuZXQgZXhwbG9yZXInKVxuICAgICAgICAgICAgYnJvd3Nlck5hbWUgPSAnaWUnO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuYW1lOiAgICAgYnJvd3Nlck5hbWUsXG4gICAgICAgICAgICB2ZXJzaW9uOiAgYnJvd3NlclZlcnNpb24udG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICAgIHBsYXRmb3JtOiBwbGF0Zm9ybS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIF9nZW5lcmF0ZUJhc2ljQ2FwYWJpbGl0aWVzIChicm93c2VyTmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZmlsdGVyUGxhdGZvcm1JbmZvKHRoaXMuX2NyZWF0ZVF1ZXJ5KGJyb3dzZXJOYW1lKSlbMF07XG4gICAgfSxcblxuICAgIF9nZXRDYXBhYmlsaXRpZXNGcm9tRW52aXJvbm1lbnQgKCkge1xuICAgICAgICAvLyBOT1RFOiBUaGlzIGZ1bmN0aW9uIG1hcHMgZW52IHZhcnMgdG8gYnJvd3NlcnN0YWNrIGNhcGFiaWxpdGllcy5cbiAgICAgICAgLy8gRm9yIHRoZSBmdWxsIGxpc3Qgb2YgY2FwYWJpbGl0aWVzLCBzZWUgaHR0cHM6Ly93d3cuYnJvd3NlcnN0YWNrLmNvbS9hdXRvbWF0ZS9jYXBhYmlsaXRpZXNcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2J1aWxkJzogICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52WydCUk9XU0VSU1RBQ0tfQlVJTERfSUQnXSB8fCBwcm9jZXNzLmVudlsnQlJPV1NFUlNUQUNLX0JVSUxEX05BTUUnXSxcbiAgICAgICAgICAgICdwcm9qZWN0JzogICAgICAgICAgICAgICAgICAgICBwcm9jZXNzLmVudlsnQlJPV1NFUlNUQUNLX1BST0pFQ1RfTkFNRSddLFxuICAgICAgICAgICAgJ3Jlc29sdXRpb24nOiAgICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52WydCUk9XU0VSU1RBQ0tfRElTUExBWV9SRVNPTFVUSU9OJ10sXG4gICAgICAgICAgICAnbmFtZSc6ICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzcy5lbnZbJ0JST1dTRVJTVEFDS19URVNUX1JVTl9OQU1FJ10sXG4gICAgICAgICAgICAnYnJvd3NlcnN0YWNrLmRlYnVnJzogICAgICAgICAgcHJvY2Vzcy5lbnZbJ0JST1dTRVJTVEFDS19ERUJVRyddLFxuICAgICAgICAgICAgJ2Jyb3dzZXJzdGFjay5jb25zb2xlJzogICAgICAgIHByb2Nlc3MuZW52WydCUk9XU0VSU1RBQ0tfQ09OU09MRSddLFxuICAgICAgICAgICAgJ2Jyb3dzZXJzdGFjay5uZXR3b3JrTG9ncyc6ICAgIHByb2Nlc3MuZW52WydCUk9XU0VSU1RBQ0tfTkVUV09SS19MT0dTJ10sXG4gICAgICAgICAgICAnYnJvd3NlcnN0YWNrLnZpZGVvJzogICAgICAgICAgcHJvY2Vzcy5lbnZbJ0JST1dTRVJTVEFDS19WSURFTyddLFxuICAgICAgICAgICAgJ2Jyb3dzZXJzdGFjay50aW1lem9uZSc6ICAgICAgIHByb2Nlc3MuZW52WydCUk9XU0VSU1RBQ0tfVElNRVpPTkUnXSxcbiAgICAgICAgICAgICdicm93c2Vyc3RhY2suZ2VvTG9jYXRpb24nOiAgICBwcm9jZXNzLmVudlsnQlJPV1NFUlNUQUNLX0dFT19MT0NBVElPTiddLFxuICAgICAgICAgICAgJ2Jyb3dzZXJzdGFjay5jdXN0b21OZXR3b3JrJzogIHByb2Nlc3MuZW52WydCUk9XU0VSU1RBQ0tfQ1VTVE9NX05FVFdPUksnXSxcbiAgICAgICAgICAgICdicm93c2Vyc3RhY2submV0d29ya1Byb2ZpbGUnOiBwcm9jZXNzLmVudlsnQlJPV1NFUlNUQUNLX05FVFdPUktfUFJPRklMRSddLFxuICAgICAgICAgICAgJ2FjY2VwdFNzbENlcnRzJzogICAgICAgICAgICAgIHByb2Nlc3MuZW52WydCUk9XU0VSU1RBQ0tfQUNDRVBUX1NTTF9DRVJUUyddXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIF9nZXRDYXBhYmlsaXRpZXNGcm9tQ29uZmlnICgpIHtcbiAgICAgICAgY29uc3QgY29uZmlnUGF0aCA9IHByb2Nlc3MuZW52LkJST1dTRVJTVEFDS19DQVBBQklMSVRJRVNfQ09ORklHX1BBVEg7XG5cbiAgICAgICAgaWYgKCFjb25maWdQYXRoKVxuICAgICAgICAgICAgcmV0dXJuIHt9O1xuXG4gICAgICAgIHJldHVybiByZXF1aXJlKGNvbmZpZ1BhdGgpO1xuICAgIH0sXG5cbiAgICBfZ2V0QWRkaXRpb25hbENhcGFiaWxpdGllcyAoKSB7XG4gICAgICAgIGNvbnN0IGNhcGFiaWxpdGllc0Zyb21FbnZpcm9ubWVudCA9IHBpY2tCeSh0aGlzLl9nZXRDYXBhYmlsaXRpZXNGcm9tRW52aXJvbm1lbnQoKSwgdmFsdWUgPT4gdmFsdWUgIT09IHZvaWQgMCk7XG5cbiAgICAgICAgcmV0dXJuIHsgLi4udGhpcy5fZ2V0Q2FwYWJpbGl0aWVzRnJvbUNvbmZpZygpLCAuLi5jYXBhYmlsaXRpZXNGcm9tRW52aXJvbm1lbnQgfTtcbiAgICB9LFxuXG4gICAgX2ZpbHRlclBsYXRmb3JtSW5mbyAocXVlcnkpIHtcbiAgICAgICAgbGV0IGZpbHRlcmVkUGxhdGZvcm1JbmZvID0gdGhpcy5wbGF0Zm9ybXNJbmZvXG4gICAgICAgICAgICAuZmlsdGVyKGluZm8gPT4ge1xuICAgICAgICAgICAgICAgIHZhciBicm93c2VyTmFtZU1hdGNoZWQgPSBpbmZvWydicm93c2VyJ10gJiYgaW5mb1snYnJvd3NlciddLnRvTG93ZXJDYXNlKCkgPT09IHF1ZXJ5Lm5hbWU7XG4gICAgICAgICAgICAgICAgdmFyIGRldmljZU5hbWVNYXRjaGVkICA9IGluZm9bJ2RldmljZSddICYmIGluZm9bJ2RldmljZSddLnRvTG93ZXJDYXNlKCkgPT09IHF1ZXJ5Lm5hbWU7XG5cbiAgICAgICAgICAgICAgICB2YXIgYnJvd3NlclZlcnNpb25NYXRjaGVkICA9IGluZm9bJ2Jyb3dzZXJfdmVyc2lvbiddICYmIFN0cmluZyhpbmZvWydicm93c2VyX3ZlcnNpb24nXSkgPT09IFN0cmluZyhxdWVyeS52ZXJzaW9uKTtcbiAgICAgICAgICAgICAgICB2YXIgcGxhdGZvcm1WZXJzaW9uTWF0Y2hlZCA9IGluZm9bJ29zX3ZlcnNpb24nXSAmJiBTdHJpbmcoaW5mb1snb3NfdmVyc2lvbiddKS50b0xvd2VyQ2FzZSgpID09PSBTdHJpbmcocXVlcnkudmVyc2lvbik7XG4gICAgICAgICAgICAgICAgdmFyIHBsYXRmb3JtTmFtZU1hdGNoZWQgICAgPSBpbmZvWydvcyddLnRvTG93ZXJDYXNlKCkgPT09IHF1ZXJ5LnBsYXRmb3JtIHx8XG4gICAgICAgICAgICAgICAgICAgIGAke2luZm9bJ29zJ10udG9Mb3dlckNhc2UoKX0gJHtpbmZvWydvc192ZXJzaW9uJ10udG9Mb3dlckNhc2UoKX1gID09PSBxdWVyeS5wbGF0Zm9ybTtcblxuICAgICAgICAgICAgICAgIHZhciBpc0FueVZlcnNpb24gID0gcXVlcnkudmVyc2lvbiA9PT0gJ2FueSc7XG4gICAgICAgICAgICAgICAgdmFyIGlzQW55UGxhdGZvcm0gPSBxdWVyeS5wbGF0Zm9ybSA9PT0gJ2FueSc7XG5cbiAgICAgICAgICAgICAgICB2YXIgZGVza3RvcEJyb3dzZXJNYXRjaGVkID0gYnJvd3Nlck5hbWVNYXRjaGVkICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChicm93c2VyVmVyc2lvbk1hdGNoZWQgfHwgaXNBbnlWZXJzaW9uKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAocGxhdGZvcm1OYW1lTWF0Y2hlZCB8fCBpc0FueVBsYXRmb3JtKTtcblxuICAgICAgICAgICAgICAgIHZhciBtb2JpbGVCcm93c2VyTWF0Y2hlZCA9IGRldmljZU5hbWVNYXRjaGVkICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHBsYXRmb3JtVmVyc2lvbk1hdGNoZWQgfHwgaXNBbnlWZXJzaW9uKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBkZXNrdG9wQnJvd3Nlck1hdGNoZWQgfHwgbW9iaWxlQnJvd3Nlck1hdGNoZWQ7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBpZiAoZmlsdGVyZWRQbGF0Zm9ybUluZm8ubGVuZ3RoICYmIHF1ZXJ5LnZlcnNpb24gPT09ICdhbnknKSB7XG4gICAgICAgICAgICBmaWx0ZXJlZFBsYXRmb3JtSW5mbyA9IGZpbHRlcmVkUGxhdGZvcm1JbmZvLmZpbHRlcihpbmZvID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBicm93c2VyVmVyc2lvbiA9IGluZm9bJ2Jyb3dzZXJfdmVyc2lvbiddIHx8ICcnO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuICFicm93c2VyVmVyc2lvbi5pbmNsdWRlcygnYmV0YScpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmlsdGVyZWRQbGF0Zm9ybUluZm87XG4gICAgfSxcblxuICAgIF9nZW5lcmF0ZUJyb3dzZXJOYW1lcyAoKSB7XG4gICAgICAgIHRoaXMuYnJvd3Nlck5hbWVzID0gdGhpcy5wbGF0Zm9ybXNJbmZvXG4gICAgICAgICAgICAubWFwKGluZm8gPT4ge1xuICAgICAgICAgICAgICAgIHZhciBpc0Rlc2t0b3AgPSAhaW5mb1snZGV2aWNlJ107XG4gICAgICAgICAgICAgICAgdmFyIG5hbWUgICAgICA9IGlzRGVza3RvcCA/IGluZm9bJ2Jyb3dzZXInXSA6IGluZm9bJ2RldmljZSddO1xuICAgICAgICAgICAgICAgIHZhciB2ZXJzaW9uICAgPSBpc0Rlc2t0b3AgPyBpbmZvWydicm93c2VyX3ZlcnNpb24nXSA6IGluZm9bJ29zX3ZlcnNpb24nXTtcbiAgICAgICAgICAgICAgICB2YXIgcGxhdGZvcm0gID0gaXNEZXNrdG9wID8gYCR7aW5mb1snb3MnXX0gJHtpbmZvWydvc192ZXJzaW9uJ119YCA6ICcnO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGAke25hbWV9QCR7dmVyc2lvbn0ke3BsYXRmb3JtID8gJzonICsgcGxhdGZvcm0gOiAnJ31gO1xuICAgICAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIF9wcmVwYXJlQ2hyb21lQ2FwYWJpbGl0aWVzIChjYXBhYmlsaXRpZXMpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52WydCUk9XU0VSU1RBQ0tfQ0hST01FX0FSR1MnXSAmJiBwcm9jZXNzLmVudlsnQlJPV1NFUlNUQUNLX0NIUk9NRV9BUkdTJ10ubGVuZ3RoID4gMClcbiAgICAgICAgICAgIGNhcGFiaWxpdGllcy5jaHJvbWVPcHRpb25zID0geyBhcmdzOiBbcHJvY2Vzcy5lbnZbJ0JST1dTRVJTVEFDS19DSFJPTUVfQVJHUyddXSB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBfcHJlcGFyZUZpcmVmb3hDYXBhYmlsaXRpZXMgKGNhcGFiaWxpdGllcykge1xuICAgICAgICBpZiAoIXByb2Nlc3MuZW52WydCUk9XU0VSU1RBQ0tfVVNFX0FVVE9NQVRFJ10pXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgY29uc3QgRmlyZWZveFByb2ZpbGUgPSByZXF1aXJlKCdmaXJlZm94LXByb2ZpbGUnKTtcbiAgICAgICAgY29uc3QgcHJvZmlsZSAgICAgICAgPSBuZXcgRmlyZWZveFByb2ZpbGUoKTtcblxuICAgICAgICBwcm9maWxlLmRlZmF1bHRQcmVmZXJlbmNlcyA9IHt9O1xuXG4gICAgICAgIHByb2ZpbGUuc2V0UHJlZmVyZW5jZSgnYnJvd3Nlci5oZWxwZXJBcHBzLm5ldmVyQXNrLnNhdmVUb0Rpc2snLCBnZXRNaW1lVHlwZXMoKSk7XG4gICAgICAgIHByb2ZpbGUudXBkYXRlUHJlZmVyZW5jZXMoKTtcblxuICAgICAgICBjYXBhYmlsaXRpZXNbJ2ZpcmVmb3hfcHJvZmlsZSddID0gYXdhaXQgcHJvbWlzaWZ5KHByb2ZpbGUuZW5jb2RlZCkuYmluZChwcm9maWxlKSgpO1xuICAgIH0sXG5cbiAgICBhc3luYyBfZW5jb2RlRmlyZWZveFByb2ZpbGUgKHByb2ZpbGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHByb2ZpbGUuZW5jb2RlZChmdW5jdGlvbiAoZXJyLCBlbmNvZGVkUHJvZmlsZSkge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShlbmNvZGVkUHJvZmlsZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8vIFJlcXVpcmVkIC0gbXVzdCBiZSBpbXBsZW1lbnRlZFxuICAgIC8vIEJyb3dzZXIgY29udHJvbFxuICAgIGFzeW5jIG9wZW5Ccm93c2VyIChpZCwgcGFnZVVybCwgYnJvd3Nlck5hbWUpIHtcbiAgICAgICAgY29uc3QgY2FwYWJpbGl0aWVzID0ge1xuICAgICAgICAgICAgLi4udGhpcy5fZ2VuZXJhdGVCYXNpY0NhcGFiaWxpdGllcyhicm93c2VyTmFtZSksXG4gICAgICAgICAgICAuLi50aGlzLl9nZXRBZGRpdGlvbmFsQ2FwYWJpbGl0aWVzKClcbiAgICAgICAgfTtcblxuICAgICAgICBjYXBhYmlsaXRpZXMubG9jYWwgPSBpc0xvY2FsRW5hYmxlZCgpO1xuXG4gICAgICAgIC8vIEdpdmUgcHJlZmVyZW5jZSB0byB0aGUgYWxyZWFkeSBydW5uaW5nIGxvY2FsIGlkZW50aWZpZXJcbiAgICAgICAgY2FwYWJpbGl0aWVzLmxvY2FsSWRlbnRpZmllciA9IHByb2Nlc3MuZW52LkJST1dTRVJTVEFDS19MT0NBTF9JREVOVElGSUVSO1xuXG4gICAgICAgIGlmIChjYXBhYmlsaXRpZXMubG9jYWwgJiYgIWNhcGFiaWxpdGllcy5sb2NhbElkZW50aWZpZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbm5lY3RvciA9IGF3YWl0IHRoaXMuX2NyZWF0ZUNvbm5lY3RvcigpO1xuXG4gICAgICAgICAgICBjYXBhYmlsaXRpZXMubG9jYWxJZGVudGlmaWVyID0gY29ubmVjdG9yLmNvbm5lY3Rvckluc3RhbmNlLmxvY2FsSWRlbnRpZmllckZsYWc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2FwYWJpbGl0aWVzLm9zLnRvTG93ZXJDYXNlKCkgPT09ICdhbmRyb2lkJykge1xuICAgICAgICAgICAgY29uc3QgcGFyc2VkUGFnZVVybCA9IHBhcnNlVXJsKHBhZ2VVcmwpO1xuICAgICAgICAgICAgY29uc3QgYnJvd3NlclByb3h5ICA9IGF3YWl0IHRoaXMuX2dldEJyb3dzZXJQcm94eShwYXJzZWRQYWdlVXJsLmhvc3RuYW1lLCBwYXJzZWRQYWdlVXJsLnBvcnQpO1xuXG4gICAgICAgICAgICBwYWdlVXJsID0gJ2h0dHA6Ly8nICsgYnJvd3NlclByb3h5LnRhcmdldEhvc3QgKyAnOicgKyBicm93c2VyUHJveHkucHJveHlQb3J0ICsgcGFyc2VkUGFnZVVybC5wYXRoO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFjYXBhYmlsaXRpZXMubmFtZSlcbiAgICAgICAgICAgIGNhcGFiaWxpdGllcy5uYW1lID0gYFRlc3RDYWZlIHRlc3QgcnVuICR7aWR9YDtcblxuICAgICAgICBpZiAoYnJvd3Nlck5hbWUuaW5jbHVkZXMoJ2Nocm9tZScpKVxuICAgICAgICAgICAgdGhpcy5fcHJlcGFyZUNocm9tZUNhcGFiaWxpdGllcyhjYXBhYmlsaXRpZXMpO1xuXG4gICAgICAgIGlmIChicm93c2VyTmFtZS5pbmNsdWRlcygnZmlyZWZveCcpKVxuICAgICAgICAgICAgYXdhaXQgdGhpcy5fcHJlcGFyZUZpcmVmb3hDYXBhYmlsaXRpZXMoY2FwYWJpbGl0aWVzKTtcblxuICAgICAgICBhd2FpdCB0aGlzLmJhY2tlbmQub3BlbkJyb3dzZXIoaWQsIHBhZ2VVcmwsIGNhcGFiaWxpdGllcyk7XG5cbiAgICAgICAgdGhpcy5zZXRVc2VyQWdlbnRNZXRhSW5mbyhpZCwgdGhpcy5iYWNrZW5kLmdldFNlc3Npb25VcmwoaWQpKTtcbiAgICB9LFxuXG4gICAgYXN5bmMgY2xvc2VCcm93c2VyIChpZCkge1xuICAgICAgICBhd2FpdCB0aGlzLmJhY2tlbmQuY2xvc2VCcm93c2VyKGlkKTtcbiAgICB9LFxuXG4gICAgLy8gT3B0aW9uYWwgLSBpbXBsZW1lbnQgbWV0aG9kcyB5b3UgbmVlZCwgcmVtb3ZlIG90aGVyIG1ldGhvZHNcbiAgICAvLyBJbml0aWFsaXphdGlvblxuICAgIGFzeW5jIGluaXQgKCkge1xuICAgICAgICB2YXIgcmVwb3J0V2FybmluZyA9ICguLi5hcmdzKSA9PiB0aGlzLnJlcG9ydFdhcm5pbmcoLi4uYXJncyk7XG5cbiAgICAgICAgdGhpcy5iYWNrZW5kID0gaXNBdXRvbWF0ZUVuYWJsZWQoKSA/IG5ldyBBdXRvbWF0ZUJhY2tlbmQocmVwb3J0V2FybmluZykgOiBuZXcgSlNUZXN0aW5nQmFja2VuZChyZXBvcnRXYXJuaW5nKTtcblxuICAgICAgICBhd2FpdCB0aGlzLl9nZXREZXZpY2VMaXN0KCk7XG5cbiAgICAgICAgdGhpcy5fZ2VuZXJhdGVCcm93c2VyTmFtZXMoKTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZGlzcG9zZSAoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuX2Rpc3Bvc2VDb25uZWN0b3IoKTtcbiAgICAgICAgYXdhaXQgdGhpcy5fZGlzcG9zZUJyb3dzZXJQcm94eSgpO1xuICAgIH0sXG5cblxuICAgIC8vIEJyb3dzZXIgbmFtZXMgaGFuZGxpbmdcbiAgICBhc3luYyBnZXRCcm93c2VyTGlzdCAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJyb3dzZXJOYW1lcztcbiAgICB9LFxuXG4gICAgYXN5bmMgaXNWYWxpZEJyb3dzZXJOYW1lIChicm93c2VyTmFtZSkge1xuICAgICAgICByZXR1cm4gcGFyc2VDYXBhYmlsaXRpZXMoYnJvd3Nlck5hbWUpLmxlbmd0aCA9PT0gMSAmJiAhIXRoaXMuX2ZpbHRlclBsYXRmb3JtSW5mbyh0aGlzLl9jcmVhdGVRdWVyeShicm93c2VyTmFtZSkpLmxlbmd0aDtcbiAgICB9LFxuXG5cbiAgICAvLyBFeHRyYSBtZXRob2RzXG4gICAgYXN5bmMgcmVzaXplV2luZG93IChpZCwgd2lkdGgsIGhlaWdodCwgY3VycmVudFdpZHRoLCBjdXJyZW50SGVpZ2h0KSB7XG4gICAgICAgIGF3YWl0IHRoaXMuYmFja2VuZC5yZXNpemVXaW5kb3coaWQsIHdpZHRoLCBoZWlnaHQsIGN1cnJlbnRXaWR0aCwgY3VycmVudEhlaWdodCk7XG4gICAgfSxcblxuICAgIGFzeW5jIG1heGltaXplV2luZG93IChpZCkge1xuICAgICAgICBhd2FpdCB0aGlzLmJhY2tlbmQubWF4aW1pemVXaW5kb3coaWQpO1xuICAgIH0sXG5cblxuICAgIGFzeW5jIHRha2VTY3JlZW5zaG90IChpZCwgc2NyZWVuc2hvdFBhdGgpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5iYWNrZW5kLnRha2VTY3JlZW5zaG90KGlkLCBzY3JlZW5zaG90UGF0aCk7XG4gICAgfSxcblxuICAgIGFzeW5jIHJlcG9ydEpvYlJlc3VsdCAoaWQsIGpvYlJlc3VsdCwgam9iRGF0YSkge1xuICAgICAgICBhd2FpdCB0aGlzLmJhY2tlbmQucmVwb3J0Sm9iUmVzdWx0KGlkLCBqb2JSZXN1bHQsIGpvYkRhdGEsIHRoaXMuSk9CX1JFU1VMVCk7XG4gICAgfSxcblxuICAgIGFzeW5jIGdldE9TSW5mbyAoaWQpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuYmFja2VuZC5nZXRPU0luZm8oaWQpO1xuICAgIH1cbn07XG4iXX0=