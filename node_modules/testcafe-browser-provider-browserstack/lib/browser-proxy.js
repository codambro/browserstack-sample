"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const http_1 = __importDefault(require("http"));
const url_1 = require("url");
const pinkie_1 = __importDefault(require("pinkie"));
module.exports = class BrowserProxy {
    constructor(targetHost, targetPort, { proxyPort, responseDelay } = {}) {
        this.targetHost = targetHost;
        this.targetPort = targetPort;
        this.proxyPort = proxyPort || 0;
        this.responseDelay = responseDelay || 0;
        this.server = http_1.default.createServer((...args) => this._onBrowserRequest(...args));
        this.server.on('connection', socket => socket.unref());
    }
    _onBrowserRequest(req, res) {
        setTimeout(() => {
            const parsedRequestUrl = (0, url_1.parse)(req.url);
            const destinationUrl = 'http://' + this.targetHost + ':' + this.targetPort + parsedRequestUrl.path;
            res.statusCode = 302;
            res.setHeader('location', destinationUrl);
            res.end();
        }, this.responseDelay);
    }
    async init() {
        return new pinkie_1.default((resolve, reject) => {
            this.server.listen(this.proxyPort, err => {
                if (err)
                    reject(err);
                else {
                    this.proxyPort = this.server.address().port;
                    resolve();
                }
            });
        });
    }
    dispose() {
        this.server.close();
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJvd3Nlci1wcm94eS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9icm93c2VyLXByb3h5LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsZ0RBQXdCO0FBQ3hCLDZCQUF3QztBQUN4QyxvREFBNkI7QUFHN0IsTUFBTSxDQUFDLE9BQU8sR0FBRyxNQUFNLFlBQVk7SUFDL0IsWUFBYSxVQUFVLEVBQUUsVUFBVSxFQUFFLEVBQUUsU0FBUyxFQUFFLGFBQWEsRUFBRSxHQUFHLEVBQUU7UUFDbEUsSUFBSSxDQUFDLFVBQVUsR0FBTSxVQUFVLENBQUM7UUFDaEMsSUFBSSxDQUFDLFVBQVUsR0FBTSxVQUFVLENBQUM7UUFDaEMsSUFBSSxDQUFDLFNBQVMsR0FBTyxTQUFTLElBQUksQ0FBQyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxJQUFJLENBQUMsQ0FBQztRQUV4QyxJQUFJLENBQUMsTUFBTSxHQUFHLGNBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxHQUFHLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUU5RSxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUMzRCxDQUFDO0lBRUQsaUJBQWlCLENBQUUsR0FBRyxFQUFFLEdBQUc7UUFDdkIsVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNaLE1BQU0sZ0JBQWdCLEdBQUcsSUFBQSxXQUFRLEVBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzNDLE1BQU0sY0FBYyxHQUFLLFNBQVMsR0FBRyxJQUFJLENBQUMsVUFBVSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsVUFBVSxHQUFHLGdCQUFnQixDQUFDLElBQUksQ0FBQztZQUVyRyxHQUFHLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQztZQUVyQixHQUFHLENBQUMsU0FBUyxDQUFDLFVBQVUsRUFBRSxjQUFjLENBQUMsQ0FBQztZQUMxQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDZCxDQUFDLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFFRCxLQUFLLENBQUMsSUFBSTtRQUNOLE9BQU8sSUFBSSxnQkFBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ25DLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsR0FBRyxDQUFDLEVBQUU7Z0JBQ3JDLElBQUksR0FBRztvQkFDSCxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7cUJBQ1g7b0JBQ0QsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQztvQkFFNUMsT0FBTyxFQUFFLENBQUM7aUJBQ2I7WUFDTCxDQUFDLENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELE9BQU87UUFDSCxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3hCLENBQUM7Q0FDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGh0dHAgZnJvbSAnaHR0cCc7XG5pbXBvcnQgeyBwYXJzZSBhcyBwYXJzZVVybCB9IGZyb20gJ3VybCc7XG5pbXBvcnQgUHJvbWlzZSBmcm9tICdwaW5raWUnO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgQnJvd3NlclByb3h5IHtcbiAgICBjb25zdHJ1Y3RvciAodGFyZ2V0SG9zdCwgdGFyZ2V0UG9ydCwgeyBwcm94eVBvcnQsIHJlc3BvbnNlRGVsYXkgfSA9IHt9KSB7XG4gICAgICAgIHRoaXMudGFyZ2V0SG9zdCAgICA9IHRhcmdldEhvc3Q7XG4gICAgICAgIHRoaXMudGFyZ2V0UG9ydCAgICA9IHRhcmdldFBvcnQ7XG4gICAgICAgIHRoaXMucHJveHlQb3J0ICAgICA9IHByb3h5UG9ydCB8fCAwO1xuICAgICAgICB0aGlzLnJlc3BvbnNlRGVsYXkgPSByZXNwb25zZURlbGF5IHx8IDA7XG5cbiAgICAgICAgdGhpcy5zZXJ2ZXIgPSBodHRwLmNyZWF0ZVNlcnZlcigoLi4uYXJncykgPT4gdGhpcy5fb25Ccm93c2VyUmVxdWVzdCguLi5hcmdzKSk7XG5cbiAgICAgICAgdGhpcy5zZXJ2ZXIub24oJ2Nvbm5lY3Rpb24nLCBzb2NrZXQgPT4gc29ja2V0LnVucmVmKCkpO1xuICAgIH1cblxuICAgIF9vbkJyb3dzZXJSZXF1ZXN0IChyZXEsIHJlcykge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZFJlcXVlc3RVcmwgPSBwYXJzZVVybChyZXEudXJsKTtcbiAgICAgICAgICAgIGNvbnN0IGRlc3RpbmF0aW9uVXJsICAgPSAnaHR0cDovLycgKyB0aGlzLnRhcmdldEhvc3QgKyAnOicgKyB0aGlzLnRhcmdldFBvcnQgKyBwYXJzZWRSZXF1ZXN0VXJsLnBhdGg7XG5cbiAgICAgICAgICAgIHJlcy5zdGF0dXNDb2RlID0gMzAyO1xuXG4gICAgICAgICAgICByZXMuc2V0SGVhZGVyKCdsb2NhdGlvbicsIGRlc3RpbmF0aW9uVXJsKTtcbiAgICAgICAgICAgIHJlcy5lbmQoKTtcbiAgICAgICAgfSwgdGhpcy5yZXNwb25zZURlbGF5KTtcbiAgICB9XG5cbiAgICBhc3luYyBpbml0ICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2VydmVyLmxpc3Rlbih0aGlzLnByb3h5UG9ydCwgZXJyID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKVxuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm94eVBvcnQgPSB0aGlzLnNlcnZlci5hZGRyZXNzKCkucG9ydDtcblxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGRpc3Bvc2UgKCkge1xuICAgICAgICB0aGlzLnNlcnZlci5jbG9zZSgpO1xuICAgIH1cbn07XG4iXX0=